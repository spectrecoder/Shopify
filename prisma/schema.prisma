datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                 String  @id @default(auto()) @map("_id") @db.ObjectId
    userId             String  @db.ObjectId
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? @db.String
    access_token       String? @db.String
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.String
    session_state      String?
    oauth_token        String?
    oauth_token_secret String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    items         Item[]
    categories    Category[]
    List          List[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Item {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    note       String?
    image      String
    category   Category?  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String?    @db.ObjectId
    User       User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String?    @db.ObjectId
    listItems  ListItem[]
}

model Category {
    id     String  @id @default(auto()) @map("_id") @db.ObjectId
    name   String  @unique
    items  Item[]
    User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String? @db.ObjectId
}

model List {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    status    Status     @default(ONGOING)
    listName  String     @default("Shopping list")
    user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String?    @db.ObjectId
    createdAt DateTime   @default(now())
    listItems ListItem[]
}

model ListItem {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    listID   String  @db.ObjectId
    list     List    @relation(fields: [listID], references: [id], onDelete: Cascade)
    itemID   String  @db.ObjectId
    item     Item    @relation(fields: [itemID], references: [id], onDelete: Cascade)
    quantity Int     @default(1)
    isDone   Boolean @default(false)
}

enum Status {
    ONGOING
    COMPLETED
    CANCELLED
}
